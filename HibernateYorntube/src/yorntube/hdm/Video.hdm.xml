<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
<query name='getAllVideosCommented'>SELECT v.title FROM ( ((select v.video_id,v.AUTHOR_ID,v.title from Video v where v.author_id = 1) as video) left join ((select c.video_id,c.user_id,c.content from Comment c where c.user_id = 2) as comment) on video.video_id = comment.video_id)</query>
-->
<hibernate-mapping>
  <class name="yorntube.persistence.Video" table="videos">
    <id column="V_ID" name="video_id" type="long">
      <generator class="increment"/>
    </id>
    <discriminator column="VIDEOTYPE" type="string"/>
    <set cascade="save-update" lazy="true" name="comments" table="comments">
      <key column="V_ID"/>
      <one-to-many class="yorntube.persistence.Comment"/>
    </set>
    <set cascade="save-update" lazy="true" name="activities" table="activities">
      <key column="V_ID"/>
      <one-to-many class="yorntube.persistence.Activity"/>
    </set>
    <many-to-one class="yorntube.persistence.User" name="user">
      <column name="AUTHOR_ID"/>
    </many-to-one>
    <property column="TITLE" name="title"/>
    <property column="VIDEOTYPE" insert="false" name="video_type" update="false"/>
    <property column="TIME" name="time" type="timestamp"/>
    <subclass discriminator-value="1" name="yorntube.runable.SDVideo"/>
    <subclass discriminator-value="2" name="yorntube.runable.HDVideo"/>
  </class>
  <query name="getAllVideosTitle">SELECT v.title FROM Video v</query>
  <query name="getUserByUserID">SELECT u FROM User u WHERE u.user_id = :user_id</query>
  <query name="getAllVideosTitleByAuthor">SELECT v.title FROM Video v WHERE v.user.user_id = :author_id</query>
  <query name="getAllVideosCommented">SELECT v.title FROM Video v left join v.comments c where v.user.user_id = 1 and c.user.user_id=2 GROUP BY v.title</query>
  <query name="getAllVideosCommentedLastweek">SELECT v.title FROM Video v RIGHT join v.comments c where c.time between :lastweek and :to GROUP BY v.title</query>
  <query name="userHaveHDVideos">SELECT u.nickname FROM User u LEFT JOIN u.videos v WHERE v.video_type = '2' GROUP BY u.user_id</query>
  <query name="getMostCommentedNumber">SELECT COUNT(c.video.video_id) FROM Comment c GROUP BY c.video.video_id ORDER BY COUNT(c.video.video_id)</query>
  <query name="getMostCommented">SELECT v FROM Video v RIGHT JOIN v.comments c GROUP BY c.video.video_id HAVING COUNT(c.video.video_id) = :maxCount</query>
</hibernate-mapping>